### 设置###
log4j.rootLogger = debug,stdout,I,D,E

### 输出信息到控制台 ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n

### 仅输出INFO 级别日志到=E://logs/info.log ###
log4j.appender.I = org.apache.log4j.DailyRollingFileAppender
log4j.appender.I.File = C://SWRW-data/logs/info.log
log4j.appender.I.DatePattern = '_'yyyy-MM-dd'.log'
log4j.appender.I.Append = true
log4j.appender.I.Threshold = INFO
log4j.appender.I.layout = org.apache.log4j.PatternLayout
log4j.appender.I.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss,SSS} %n%m%n
log4j.appender.I.filter.F1=org.apache.log4j.varia.LevelRangeFilter
log4j.appender.I.filter.F1.LevelMin=INFO
log4j.appender.I.filter.F1.LevelMax=INFO

### 输出DEBUG 级别以上的日志到=E://logs/error.log ###
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.File = C://SWRW-data/logs/log.log
log4j.appender.D.DatePattern = '_'yyyy-MM-dd'.log'
log4j.appender.D.Append = true
log4j.appender.D.Threshold = DEBUG 
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = [%p] %d{yyyy-MM-dd HH:mm:ss,SSS} %n%m%n

### 输出ERROR 级别以上的日志到=E://logs/error.log ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File =C://SWRW-data/logs/error.log 
log4j.appender.E.DatePattern = '_'yyyy-MM-dd'.log'
log4j.appender.E.Append = true
log4j.appender.E.Threshold = ERROR 
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern =%d{yyyy-MM-dd HH\:mm\:ss,SSS} %n%m%n

##---------------------------以下是所有参数配置解释-----------------------------------
 
# Global logging configuration
#注意如果是开发环境日志级别需要配置为DEBUG，生产环境设置为INFO或ERROR
#日志信息的优先级从高到低有ERROR、WARN、INFO、DEBUG
 
#org.apache.log4j.ConsoleAppender（控制台）
#org.apache.log4j.FileAppender（文件）
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
#日志还可以输出到数据库，文件。。。
 
#org.apache.log4j.HTMLLayout（HTML表格形式）
#org.apache.log4j.SimpleLayout（简单格式的日志，只包括日志信息的级别和指定的信息字符串 ，如:DEBUG - Hello）
#org.apache.log4j.TTCCLayout（日志的格式包括日志产生的时间、线程、类别等等信息）
#org.apache.log4j.PatternLayout（灵活地自定义日志格式）
 
#ConversionPattern解释
#－X: X信息输出时左对齐 
#
#%p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL, 
#
#%d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy-MM-dd HH:mm:ss,SSS}，输出类似：2011-10-18 22:10:28,921 
#%r: 输出自应用启动到输出该log信息耗费的毫秒数 
#%c: 输出日志信息所属的类目，通常就是所在类的全名 
#%t: 输出产生该日志事件的线程名 
#%l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。 
#%x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。 
#%%: 输出一个"%"字符 
#%F: 输出日志消息产生时所在的文件名称 
#%L: 输出代码中的行号 
#%m: 输出代码中指定的消息,产生的日志具体信息 
#%n: 输出一个回车换行符，Windows平台为"\r\n"，Unix平台为"\n"输出日志信息换行 
 
#可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如： 
#%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。 
#%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，"-"号指定左对齐。 
#%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。 
#%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边交远销出的字符截掉
#
#假设当前logger名字空间是"a.b.c"
#
#%c a.b.c
#%c{2} b.c
#
#%20c （若名字空间长度小于20，则左边用空格填充）
#%-20c （若名字空间长度小于20，则右边用空格填充）
#%.30c （若名字空间长度超过30，截去多余字符）
#%20.30c （若名字空间长度小于20，则左边用空格填充；若名字空间长度超过30，截去多余字符）
#%-20.30c （若名字空间长度小于20，则右边用空格填充；若名字空间长度超过30，截去多余字符）
 
#DatePattern选项的有效值为：
#   '.'yyyy-MM,对应monthly(每月)
#   '.'yyyy-ww,对应weekly(每周)
#   '.'yyyy-MM-dd,对应daily(每天)
#   '.'yyyy-MM-dd-a,对应half-daily(每半天)
#   '.'yyyy-MM-dd-HH,对应hourly(每小时)
#   '.'yyyy-MM-dd-HH-mm,对应minutely(每分钟)